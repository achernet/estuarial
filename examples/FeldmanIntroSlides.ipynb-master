{
 "metadata": {
  "name": "",
  "signature": "sha256:c727d3fe115272c22b68213cb471b9635a7b96586c10d534f9efa7fab4496776"
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## FELDMAN\n",
      "\n",
      "**Feldman** is an open-source API for Thomson Reuters\u2019 QA Direct. The aim of Feldman is help quants, financial researchers, and other domain experts fetch data from the various DBs within QAD in a complete, expressible, and efficient manner through Python.\n",
      "\n",
      "##Common Imports and Feldman"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import feldman as fd\n",
      "import datetime as dt\n",
      "import pandas as pd\n",
      "import numpy as np"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 1
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Two Methods/Styles for navigating the TRQAD ecosystem\n",
      "\n",
      "- OO/attribute style: great for starting from scratch and exploration\n",
      "- Functional style: great fro starting with predefined universes and production oriented\n",
      "\n",
      "## OO/Attribute Style\n",
      "- pre-built universes\n",
      "- easy access to data for a **TR Universe** object\n",
      "- not completely expressive"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "#SP500 at a given date\n",
      "spx = fd.UniverseBuilder.spx_idx('2014-01-30')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/opt/wakari/install/lib/python2.7/site-packages/pandas/io/pytables.py:1992: PerformanceWarning: \n",
        "your performance may suffer as PyTables will pickle object types that it cannot\n",
        "map directly to c-types [inferred_type->mixed-integer,key->values] [items->None]\n",
        "\n",
        "  warnings.warn(ws, PerformanceWarning)\n",
        "/opt/wakari/install/lib/python2.7/site-packages/tables/path.py:99: NaturalNameWarning: object name is not a valid Python identifier: 'spx_universe.fsql'; it does not match the pattern ``^[a-zA-Z_][a-zA-Z0-9_]*$``; you will not be able to use natural naming to access this object; using ``getattr()`` will still work, though\n",
        "  NaturalNameWarning)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "SELECT  * from (        SELECT  I.NAME as INAME\n",
        "            ,   I.TICKER as ITICKER\n",
        "            ,   S.TICKER\n",
        "            ,   S.CUSIP\n",
        "            ,   S.NAME\n",
        "            ,   N.DATE_\n",
        "            ,   D.CLOSE_\n",
        "            ,   N.SHARES\n",
        "            ,   M.SECCODE\n",
        "            ,   D.CLOSE_ * N.SHARES AS RELATIVE_MARKET_CAP\n",
        "        FROM         DBO.IDXSPCMP N\n",
        "            JOIN     DBO.IDXINFO I\n",
        "                ON  I.CODE = N.IDXCODE\n",
        "            JOIN     PRC.IDXSEC S\n",
        "                ON  S.CODE = N.SECCODE\n",
        "                AND S.VENDOR = 1 -- S&P\n",
        "            JOIN     DBO.SECMAP M\n",
        "                ON  M.SECCODE = S.PRCCODE\n",
        "                AND M.VENTYPE = 14 -- IDC Pricing\n",
        "                AND M.EXCHANGE = 1 -- US\n",
        "            JOIN     PRC.PRCDLY D\n",
        "                ON  D.CODE = M.VENCODE\n",
        "                AND D.DATE_ =(  SELECT  MAX(DATE_)\n",
        "                            FROM     PRC.PRCDLY\n",
        "                            WHERE   CODE = D.CODE\n",
        "                            AND DATE_ <= N.DATE_    )\n",
        ") as X  \n",
        "WHERE iticker = :iticker_1 AND date_ = :date__1\n"
       ]
      }
     ],
     "prompt_number": 2
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Data is now stored in a Pandas DataFrame"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "spx.data.head()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>iname</th>\n",
        "      <th>iticker</th>\n",
        "      <th>ticker</th>\n",
        "      <th>cusip</th>\n",
        "      <th>name</th>\n",
        "      <th>date_</th>\n",
        "      <th>close_</th>\n",
        "      <th>shares</th>\n",
        "      <th>seccode</th>\n",
        "      <th>relative_market_cap</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>0</th>\n",
        "      <td> S&amp;P 500 INDEX</td>\n",
        "      <td> SPX_IDX</td>\n",
        "      <td> ADBE</td>\n",
        "      <td> 00724F10</td>\n",
        "      <td>     Adobe Systems Inc</td>\n",
        "      <td>2014-01-30 00:00:00</td>\n",
        "      <td>  59.389999</td>\n",
        "      <td>  464.89491</td>\n",
        "      <td> 2099</td>\n",
        "      <td> 27610.108421</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1</th>\n",
        "      <td> S&amp;P 500 INDEX</td>\n",
        "      <td> SPX_IDX</td>\n",
        "      <td>  ADI</td>\n",
        "      <td> 03265410</td>\n",
        "      <td>    Analog Devices Inc</td>\n",
        "      <td>2014-01-30 00:00:00</td>\n",
        "      <td>  48.889999</td>\n",
        "      <td>  311.04500</td>\n",
        "      <td> 5689</td>\n",
        "      <td> 15206.989860</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2</th>\n",
        "      <td> S&amp;P 500 INDEX</td>\n",
        "      <td> SPX_IDX</td>\n",
        "      <td>  AGN</td>\n",
        "      <td> 01849010</td>\n",
        "      <td>          Allergan Inc</td>\n",
        "      <td>2014-01-30 00:00:00</td>\n",
        "      <td> 115.110001</td>\n",
        "      <td>  297.16200</td>\n",
        "      <td> 3122</td>\n",
        "      <td> 34206.318001</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3</th>\n",
        "      <td> S&amp;P 500 INDEX</td>\n",
        "      <td> SPX_IDX</td>\n",
        "      <td> ALTR</td>\n",
        "      <td> 02144110</td>\n",
        "      <td>           Altera Corp</td>\n",
        "      <td>2014-01-30 00:00:00</td>\n",
        "      <td>  33.540001</td>\n",
        "      <td>  321.12900</td>\n",
        "      <td> 3788</td>\n",
        "      <td> 10770.666954</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4</th>\n",
        "      <td> S&amp;P 500 INDEX</td>\n",
        "      <td> SPX_IDX</td>\n",
        "      <td> AMAT</td>\n",
        "      <td> 03822210</td>\n",
        "      <td> Applied Materials Inc</td>\n",
        "      <td>2014-01-30 00:00:00</td>\n",
        "      <td>  16.780001</td>\n",
        "      <td> 1204.18300</td>\n",
        "      <td> 6088</td>\n",
        "      <td> 20206.191567</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 3,
       "text": [
        "           iname  iticker ticker     cusip                   name  \\\n",
        "0  S&P 500 INDEX  SPX_IDX   ADBE  00724F10      Adobe Systems Inc   \n",
        "1  S&P 500 INDEX  SPX_IDX    ADI  03265410     Analog Devices Inc   \n",
        "2  S&P 500 INDEX  SPX_IDX    AGN  01849010           Allergan Inc   \n",
        "3  S&P 500 INDEX  SPX_IDX   ALTR  02144110            Altera Corp   \n",
        "4  S&P 500 INDEX  SPX_IDX   AMAT  03822210  Applied Materials Inc   \n",
        "\n",
        "                date_      close_      shares  seccode  relative_market_cap  \n",
        "0 2014-01-30 00:00:00   59.389999   464.89491     2099         27610.108421  \n",
        "1 2014-01-30 00:00:00   48.889999   311.04500     5689         15206.989860  \n",
        "2 2014-01-30 00:00:00  115.110001   297.16200     3122         34206.318001  \n",
        "3 2014-01-30 00:00:00   33.540001   321.12900     3788         10770.666954  \n",
        "4 2014-01-30 00:00:00   16.780001  1204.18300     6088         20206.191567  "
       ]
      }
     ],
     "prompt_number": 3
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Feldman has a large and growing catalogue of sql queries additionally, when Feldman executes a query the returned data is cached (HDFT5).  Let's re-run the previous query:"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "spx = fd.UniverseBuilder.spx_idx('2014-01-30')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 4
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "cache = pd.HDFStore('/opt/wakari/.feldman/.cache/cache_spx_universe.fsql.hdf5')\n",
      "print cache['/spx_universe.fsql'].head()\n",
      "cache.close()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "           INAME  ITICKER TICKER     CUSIP                   NAME  \\\n",
        "0  S&P 500 INDEX  SPX_IDX   ADBE  00724F10      Adobe Systems Inc   \n",
        "1  S&P 500 INDEX  SPX_IDX    ADI  03265410     Analog Devices Inc   \n",
        "2  S&P 500 INDEX  SPX_IDX    AGN  01849010           Allergan Inc   \n",
        "3  S&P 500 INDEX  SPX_IDX   ALTR  02144110            Altera Corp   \n",
        "4  S&P 500 INDEX  SPX_IDX   AMAT  03822210  Applied Materials Inc   \n",
        "\n",
        "                DATE_      CLOSE_      SHARES  SECCODE  RELATIVE_MARKET_CAP  \n",
        "0 2014-01-30 00:00:00   59.389999   464.89491     2099         27610.108421  \n",
        "1 2014-01-30 00:00:00   48.889999   311.04500     5689         15206.989860  \n",
        "2 2014-01-30 00:00:00  115.110001   297.16200     3122         34206.318001  \n",
        "3 2014-01-30 00:00:00   33.540001   321.12900     3788         10770.666954  \n",
        "4 2014-01-30 00:00:00   16.780001  1204.18300     6088         20206.191567  \n"
       ]
      }
     ],
     "prompt_number": 5
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "**TR Universe** objects offer several convenience methods for pulling data relative to the entities in that universe.  For example we can pull the OHLC values from the SP500 or the CASH,Net Income, and other metrics from the WorldScope database"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "spx_ohlc = spx.ohlc['2014-02-03':'2014-02-05']"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "SELECT  * from (select m.seccode, marketdate, Open_, high, low, Close_, q.ISOCurrCode,\n",
        "    case priceunit\n",
        "        when 'E+02' then 100\n",
        "        else 1\n",
        "    end as CumAdjFactor\n",
        "from Ds2PrimQtPrc q join secmapx m on\n",
        "       m.vencode = q.infocode and m.ventype = 33 and rank = 1\n",
        "join ds2Adj a on a.infocode = q.infocode\n",
        "           and q.marketdate between adjdate and isnull(endadjdate, '2079-06-06') and AdjType = 2\n",
        "join ds2exchqtinfo e on e.infocode = q.infocode\n",
        "           and e.startdate < q.marketdate and q.exchintcode = e.exchintcode\n",
        ") as X  \n",
        "WHERE seccode IN (:seccode_1, :seccode_2, :seccode_3, :seccode_4, :seccode_5, :seccode_6, :seccode_7, :seccode_8, :seccode_9, :seccode_10, :seccode_11, :seccode_12, :seccode_13, :seccode_14, :seccode_15, :seccode_16, :seccode_17, :seccode_18, :seccode_19, :seccode_20, :seccode_21, :seccode_22, :seccode_23, :seccode_24, :seccode_25, :seccode_26, :seccode_27, :seccode_28, :seccode_29, :seccode_30, :seccode_31, :seccode_32, :seccode_33, :seccode_34, :seccode_35, :seccode_36, :seccode_37, :seccode_38, :seccode_39, :seccode_40, :seccode_41, :seccode_42, :seccode_43, :seccode_44, :seccode_45, :seccode_46, :seccode_47, :seccode_48, :seccode_49, :seccode_50, :seccode_51, :seccode_52, :seccode_53, :seccode_54, :seccode_55, :seccode_56, :seccode_57, :seccode_58, :seccode_59, :seccode_60, :seccode_61, :seccode_62, :seccode_63, :seccode_64, :seccode_65, :seccode_66, :seccode_67, :seccode_68, :seccode_69, :seccode_70, :seccode_71, :seccode_72, :seccode_73, :seccode_74, :seccode_75, :seccode_76, :seccode_77, :seccode_78, :seccode_79, :seccode_80, :seccode_81, :seccode_82, :seccode_83, :seccode_84, :seccode_85, :seccode_86, :seccode_87, :seccode_88, :seccode_89, :seccode_90, :seccode_91, :seccode_92, :seccode_93, :seccode_94, :seccode_95, :seccode_96, :seccode_97, :seccode_98, :seccode_99, :seccode_100, :seccode_101, :seccode_102, :seccode_103, :seccode_104, :seccode_105, :seccode_106, :seccode_107, :seccode_108, :seccode_109, :seccode_110, :seccode_111, :seccode_112, :seccode_113, :seccode_114, :seccode_115, :seccode_116, :seccode_117, :seccode_118, :seccode_119, :seccode_120, :seccode_121, :seccode_122, :seccode_123, :seccode_124, :seccode_125, :seccode_126, :seccode_127, :seccode_128, :seccode_129, :seccode_130, :seccode_131, :seccode_132, :seccode_133, :seccode_134, :seccode_135, :seccode_136, :seccode_137, :seccode_138, :seccode_139, :seccode_140, :seccode_141, :seccode_142, :seccode_143, :seccode_144, :seccode_145, :seccode_146, :seccode_147, :seccode_148, :seccode_149, :seccode_150, :seccode_151, :seccode_152, :seccode_153, :seccode_154, :seccode_155, :seccode_156, :seccode_157, :seccode_158, :seccode_159, :seccode_160, :seccode_161, :seccode_162, :seccode_163, :seccode_164, :seccode_165, :seccode_166, :seccode_167, :seccode_168, :seccode_169, :seccode_170, :seccode_171, :seccode_172, :seccode_173, :seccode_174, :seccode_175, :seccode_176, :seccode_177, :seccode_178, :seccode_179, :seccode_180, :seccode_181, :seccode_182, :seccode_183, :seccode_184, :seccode_185, :seccode_186, :seccode_187, :seccode_188, :seccode_189, :seccode_190, :seccode_191, :seccode_192, :seccode_193, :seccode_194, :seccode_195, :seccode_196, :seccode_197, :seccode_198, :seccode_199, :seccode_200, :seccode_201, :seccode_202, :seccode_203, :seccode_204, :seccode_205, :seccode_206, :seccode_207, :seccode_208, :seccode_209, :seccode_210, :seccode_211, :seccode_212, :seccode_213, :seccode_214, :seccode_215, :seccode_216, :seccode_217, :seccode_218, :seccode_219, :seccode_220, :seccode_221, :seccode_222, :seccode_223, :seccode_224, :seccode_225, :seccode_226, :seccode_227, :seccode_228, :seccode_229, :seccode_230, :seccode_231, :seccode_232, :seccode_233, :seccode_234, :seccode_235, :seccode_236, :seccode_237, :seccode_238, :seccode_239, :seccode_240, :seccode_241, :seccode_242, :seccode_243, :seccode_244, :seccode_245, :seccode_246, :seccode_247, :seccode_248, :seccode_249, :seccode_250, :seccode_251, :seccode_252, :seccode_253, :seccode_254, :seccode_255, :seccode_256, :seccode_257, :seccode_258, :seccode_259, :seccode_260, :seccode_261, :seccode_262, :seccode_263, :seccode_264, :seccode_265, :seccode_266, :seccode_267, :seccode_268, :seccode_269, :seccode_270, :seccode_271, :seccode_272, :seccode_273, :seccode_274, :seccode_275, :seccode_276, :seccode_277, :seccode_278, :seccode_279, :seccode_280, :seccode_281, :seccode_282, :seccode_283, :seccode_284, :seccode_285, :seccode_286, :seccode_287, :seccode_288, :seccode_289, :seccode_290, :seccode_291, :seccode_292, :seccode_293, :seccode_294, :seccode_295, :seccode_296, :seccode_297, :seccode_298, :seccode_299, :seccode_300, :seccode_301, :seccode_302, :seccode_303, :seccode_304, :seccode_305, :seccode_306, :seccode_307, :seccode_308, :seccode_309, :seccode_310, :seccode_311, :seccode_312, :seccode_313, :seccode_314, :seccode_315, :seccode_316, :seccode_317, :seccode_318, :seccode_319, :seccode_320, :seccode_321, :seccode_322, :seccode_323, :seccode_324, :seccode_325, :seccode_326, :seccode_327, :seccode_328, :seccode_329, :seccode_330, :seccode_331, :seccode_332, :seccode_333, :seccode_334, :seccode_335, :seccode_336, :seccode_337, :seccode_338, :seccode_339, :seccode_340, :seccode_341, :seccode_342, :seccode_343, :seccode_344, :seccode_345, :seccode_346, :seccode_347, :seccode_348, :seccode_349, :seccode_350, :seccode_351, :seccode_352, :seccode_353, :seccode_354, :seccode_355, :seccode_356, :seccode_357, :seccode_358, :seccode_359, :seccode_360, :seccode_361, :seccode_362, :seccode_363, :seccode_364, :seccode_365, :seccode_366, :seccode_367, :seccode_368, :seccode_369, :seccode_370, :seccode_371, :seccode_372, :seccode_373, :seccode_374, :seccode_375, :seccode_376, :seccode_377, :seccode_378, :seccode_379, :seccode_380, :seccode_381, :seccode_382, :seccode_383, :seccode_384, :seccode_385, :seccode_386, :seccode_387, :seccode_388, :seccode_389, :seccode_390, :seccode_391, :seccode_392, :seccode_393, :seccode_394, :seccode_395, :seccode_396, :seccode_397, :seccode_398, :seccode_399, :seccode_400, :seccode_401, :seccode_402, :seccode_403, :seccode_404, :seccode_405, :seccode_406, :seccode_407, :seccode_408, :seccode_409, :seccode_410, :seccode_411, :seccode_412, :seccode_413, :seccode_414, :seccode_415, :seccode_416, :seccode_417, :seccode_418, :seccode_419, :seccode_420, :seccode_421, :seccode_422, :seccode_423, :seccode_424, :seccode_425, :seccode_426, :seccode_427, :seccode_428, :seccode_429, :seccode_430, :seccode_431, :seccode_432, :seccode_433, :seccode_434, :seccode_435, :seccode_436, :seccode_437, :seccode_438, :seccode_439, :seccode_440, :seccode_441, :seccode_442, :seccode_443, :seccode_444, :seccode_445, :seccode_446, :seccode_447, :seccode_448, :seccode_449, :seccode_450, :seccode_451, :seccode_452, :seccode_453, :seccode_454, :seccode_455, :seccode_456, :seccode_457, :seccode_458, :seccode_459, :seccode_460, :seccode_461, :seccode_462, :seccode_463, :seccode_464, :seccode_465, :seccode_466, :seccode_467, :seccode_468, :seccode_469, :seccode_470, :seccode_471, :seccode_472, :seccode_473, :seccode_474, :seccode_475, :seccode_476, :seccode_477, :seccode_478, :seccode_479, :seccode_480, :seccode_481, :seccode_482, :seccode_483, :seccode_484, :seccode_485, :seccode_486, :seccode_487, :seccode_488, :seccode_489, :seccode_490, :seccode_491, :seccode_492, :seccode_493, :seccode_494, :seccode_495, :seccode_496, :seccode_497, :seccode_498, :seccode_499, :seccode_500) AND marketdate >= :marketdate_1 AND marketdate <= :marketdate_2\n"
       ]
      }
     ],
     "prompt_number": 6
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "spx_ohlc.head()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>seccode</th>\n",
        "      <th>marketdate</th>\n",
        "      <th>Open_</th>\n",
        "      <th>high</th>\n",
        "      <th>low</th>\n",
        "      <th>Close_</th>\n",
        "      <th>ISOCurrCode</th>\n",
        "      <th>CumAdjFactor</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>0</th>\n",
        "      <td> 75783</td>\n",
        "      <td>2014-02-03 00:00:00</td>\n",
        "      <td> 62.829987</td>\n",
        "      <td> 62.890000</td>\n",
        "      <td> 61.390000</td>\n",
        "      <td> 61.519990</td>\n",
        "      <td> USD</td>\n",
        "      <td> 1</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1</th>\n",
        "      <td> 75783</td>\n",
        "      <td>2014-02-04 00:00:00</td>\n",
        "      <td> 61.979996</td>\n",
        "      <td> 62.809998</td>\n",
        "      <td> 61.640000</td>\n",
        "      <td> 62.399994</td>\n",
        "      <td> USD</td>\n",
        "      <td> 1</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2</th>\n",
        "      <td> 75783</td>\n",
        "      <td>2014-02-05 00:00:00</td>\n",
        "      <td> 62.199997</td>\n",
        "      <td> 63.719986</td>\n",
        "      <td> 60.719986</td>\n",
        "      <td> 63.089997</td>\n",
        "      <td> USD</td>\n",
        "      <td> 1</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3</th>\n",
        "      <td> 14316</td>\n",
        "      <td>2014-02-03 00:00:00</td>\n",
        "      <td> 21.929993</td>\n",
        "      <td> 21.949997</td>\n",
        "      <td> 21.454987</td>\n",
        "      <td> 21.549988</td>\n",
        "      <td> USD</td>\n",
        "      <td> 1</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4</th>\n",
        "      <td> 14316</td>\n",
        "      <td>2014-02-04 00:00:00</td>\n",
        "      <td> 21.579987</td>\n",
        "      <td> 21.819993</td>\n",
        "      <td> 21.399994</td>\n",
        "      <td> 21.799988</td>\n",
        "      <td> USD</td>\n",
        "      <td> 1</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 7,
       "text": [
        "   seccode          marketdate      Open_       high        low     Close_  \\\n",
        "0    75783 2014-02-03 00:00:00  62.829987  62.890000  61.390000  61.519990   \n",
        "1    75783 2014-02-04 00:00:00  61.979996  62.809998  61.640000  62.399994   \n",
        "2    75783 2014-02-05 00:00:00  62.199997  63.719986  60.719986  63.089997   \n",
        "3    14316 2014-02-03 00:00:00  21.929993  21.949997  21.454987  21.549988   \n",
        "4    14316 2014-02-04 00:00:00  21.579987  21.819993  21.399994  21.799988   \n",
        "\n",
        "  ISOCurrCode  CumAdjFactor  \n",
        "0         USD             1  \n",
        "1         USD             1  \n",
        "2         USD             1  \n",
        "3         USD             1  \n",
        "4         USD             1  "
       ]
      }
     ],
     "prompt_number": 7
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Again, everything comes back as a dataframe so we can leverage the full utilities Pandas has to offer"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "open_vals = spx_ohlc.pivot(index='marketdate',columns='seccode',values='Open_')\n",
      "open_vals[open_vals.columns[:5]]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th>seccode</th>\n",
        "      <th>978</th>\n",
        "      <th>1007</th>\n",
        "      <th>1025</th>\n",
        "      <th>1330</th>\n",
        "      <th>1477</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>marketdate</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2014-02-03</th>\n",
        "      <td> 62.859986</td>\n",
        "      <td> 47.619996</td>\n",
        "      <td> 14.06</td>\n",
        "      <td> 38.819993</td>\n",
        "      <td> 33.319993</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2014-02-04</th>\n",
        "      <td> 60.979996</td>\n",
        "      <td> 47.000000</td>\n",
        "      <td> 13.76</td>\n",
        "      <td> 38.159989</td>\n",
        "      <td> 32.079987</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2014-02-05</th>\n",
        "      <td> 61.899994</td>\n",
        "      <td> 46.959992</td>\n",
        "      <td> 13.74</td>\n",
        "      <td> 38.629990</td>\n",
        "      <td> 32.399994</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 8,
       "text": [
        "seccode          978        1007   1025       1330       1477\n",
        "marketdate                                                   \n",
        "2014-02-03  62.859986  47.619996  14.06  38.819993  33.319993\n",
        "2014-02-04  60.979996  47.000000  13.76  38.159989  32.079987\n",
        "2014-02-05  61.899994  46.959992  13.74  38.629990  32.399994"
       ]
      }
     ],
     "prompt_number": 8
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "open_vals[open_vals.columns[:5]].plot()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 9,
       "text": [
        "<matplotlib.axes.AxesSubplot at 0x4065f10>"
       ]
      },
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\nERGRhvw/b6q+sS/UyGAAAAAASUVORK5CYII=\n",
       "text": [
        "<matplotlib.figure.Figure at 0x5026d50>"
       ]
      }
     ],
     "prompt_number": 9
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Feldman also offers a number of methods to query the metadata of QAD.  It can be difficult to remember the associate values for a given metric within QAD or you may want to backout a query to SEDOL/CUSIP vals.  What are the entities in the above plot?"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "trmeta = fd.TRMETA()\n",
      "trmeta.find_entity_id(978)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>SecCode</th>\n",
        "      <th>Id</th>\n",
        "      <th>Type_</th>\n",
        "      <th>IdBase</th>\n",
        "      <th>IdSeq</th>\n",
        "      <th>Cusip</th>\n",
        "      <th>PrevCusip</th>\n",
        "      <th>Sedol</th>\n",
        "      <th>PrevSedol</th>\n",
        "      <th>Sedol2</th>\n",
        "      <th>PrevSedol2</th>\n",
        "      <th>Isin</th>\n",
        "      <th>Name</th>\n",
        "      <th>Country</th>\n",
        "      <th>Vendors1</th>\n",
        "      <th>Vendors2</th>\n",
        "      <th>Vendors3</th>\n",
        "      <th>Vendors4</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>0</th>\n",
        "      <td> 978</td>\n",
        "      <td>     AFL</td>\n",
        "      <td> 1</td>\n",
        "      <td> NaN</td>\n",
        "      <td> 0</td>\n",
        "      <td> 00105510</td>\n",
        "      <td> 02587010</td>\n",
        "      <td> 202636</td>\n",
        "      <td> NaN</td>\n",
        "      <td> NaN</td>\n",
        "      <td> NaN</td>\n",
        "      <td> US0010551028</td>\n",
        "      <td>                                     AFLAC INC COM</td>\n",
        "      <td> USA</td>\n",
        "      <td> 2515541942068219</td>\n",
        "      <td> 0</td>\n",
        "      <td> 0</td>\n",
        "      <td>-9223372036854775808</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1</th>\n",
        "      <td> 978</td>\n",
        "      <td> QH_FUT0</td>\n",
        "      <td> 2</td>\n",
        "      <td> NaN</td>\n",
        "      <td> 0</td>\n",
        "      <td>      NaN</td>\n",
        "      <td>      NaN</td>\n",
        "      <td>    NaN</td>\n",
        "      <td> NaN</td>\n",
        "      <td> NaN</td>\n",
        "      <td> NaN</td>\n",
        "      <td>          NaN</td>\n",
        "      <td> Heating Oil/E-MinNY           NYMEX   21000gal...</td>\n",
        "      <td> NaN</td>\n",
        "      <td>                0</td>\n",
        "      <td> 0</td>\n",
        "      <td> 0</td>\n",
        "      <td>                   0</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2</th>\n",
        "      <td> 978</td>\n",
        "      <td> WP_SPOT</td>\n",
        "      <td> 4</td>\n",
        "      <td> NaN</td>\n",
        "      <td> 0</td>\n",
        "      <td>      NaN</td>\n",
        "      <td>      NaN</td>\n",
        "      <td>    NaN</td>\n",
        "      <td> NaN</td>\n",
        "      <td> NaN</td>\n",
        "      <td> NaN</td>\n",
        "      <td>          NaN</td>\n",
        "      <td>                 POLISH ZLOTY                  CME</td>\n",
        "      <td> NaN</td>\n",
        "      <td>                0</td>\n",
        "      <td> 0</td>\n",
        "      <td> 0</td>\n",
        "      <td>                   0</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 10,
       "text": [
        "   SecCode       Id  Type_ IdBase  IdSeq     Cusip PrevCusip   Sedol  \\\n",
        "0      978      AFL      1    NaN      0  00105510  02587010  202636   \n",
        "1      978  QH_FUT0      2    NaN      0       NaN       NaN     NaN   \n",
        "2      978  WP_SPOT      4    NaN      0       NaN       NaN     NaN   \n",
        "\n",
        "  PrevSedol Sedol2 PrevSedol2          Isin  \\\n",
        "0       NaN    NaN        NaN  US0010551028   \n",
        "1       NaN    NaN        NaN           NaN   \n",
        "2       NaN    NaN        NaN           NaN   \n",
        "\n",
        "                                                Name Country  \\\n",
        "0                                      AFLAC INC COM     USA   \n",
        "1  Heating Oil/E-MinNY           NYMEX   21000gal...     NaN   \n",
        "2                  POLISH ZLOTY                  CME     NaN   \n",
        "\n",
        "           Vendors1  Vendors2  Vendors3             Vendors4  \n",
        "0  2515541942068219         0         0 -9223372036854775808  \n",
        "1                 0         0         0                    0  \n",
        "2                 0         0         0                    0  "
       ]
      }
     ],
     "prompt_number": 10
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "We can use ipython and ipython notebooks to give us an nice UI for lookahead and <tab>-complete to find the appropriate metric for Worldscope"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "fd.metrics.ws.CASH"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 11,
       "text": [
        "2003"
       ]
      }
     ],
     "prompt_number": 11
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "fd.metrics.ws.find_metrics('DEBT')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Number</th>\n",
        "      <th>Name</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>197 </th>\n",
        "      <td> 18282</td>\n",
        "      <td>                                  CONVERTIBLE DEBT</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>215 </th>\n",
        "      <td> 18232</td>\n",
        "      <td>                 CURRENT PORTION OF LONG TERM DEBT</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>817 </th>\n",
        "      <td>  1251</td>\n",
        "      <td>                          INTEREST EXPENSE ON DEBT</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>929 </th>\n",
        "      <td>  3251</td>\n",
        "      <td>                                    LONG TERM DEBT</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>930 </th>\n",
        "      <td>  8226</td>\n",
        "      <td>                    LONG TERM DEBT % COMMON EQUITY</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>931 </th>\n",
        "      <td>  8277</td>\n",
        "      <td>             LONG TERM DEBT % COMMON EQUITY (GAAP)</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>932 </th>\n",
        "      <td>  8279</td>\n",
        "      <td> LONG TERM DEBT % COMMON EQUITY (GAAP) - 3 YEAR...</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>933 </th>\n",
        "      <td>  8281</td>\n",
        "      <td> LONG TERM DEBT % COMMON EQUITY (GAAP) - 5 YEAR...</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>934 </th>\n",
        "      <td>  8230</td>\n",
        "      <td>         LONG TERM DEBT % COMMON EQUITY - 5 YR AVG</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>935 </th>\n",
        "      <td>  8216</td>\n",
        "      <td>                    LONG TERM DEBT % TOTAL CAPITAL</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>936 </th>\n",
        "      <td>  8220</td>\n",
        "      <td>         LONG TERM DEBT % TOTAL CAPITAL - 5 YR AVG</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>937 </th>\n",
        "      <td>  8217</td>\n",
        "      <td>          LONG TERM DEBT % TOTAL CAPITAL - CURRENT</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>938 </th>\n",
        "      <td>  6769</td>\n",
        "      <td>                             LONG TERM DEBT - GAAP</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>939 </th>\n",
        "      <td>  3245</td>\n",
        "      <td>       LONG TERM DEBT EXCLUDING CAPITALIZED LEASES</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1059</th>\n",
        "      <td> 18199</td>\n",
        "      <td>                                          NET DEBT</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1104</th>\n",
        "      <td> 18281</td>\n",
        "      <td>                              NON-CONVERTIBLE DEBT</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1440</th>\n",
        "      <td> 18298</td>\n",
        "      <td>           PROVISION FOR BAD DEBTS (SUPPLEMENTARY)</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1458</th>\n",
        "      <td>  4701</td>\n",
        "      <td>                       REDUCTION IN LONG TERM DEBT</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1560</th>\n",
        "      <td>  3051</td>\n",
        "      <td> SHORT TERM DEBT &amp; CURRENT PORTION OF LONG TERM...</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1661</th>\n",
        "      <td>  3255</td>\n",
        "      <td>                                        TOTAL DEBT</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1662</th>\n",
        "      <td>  8231</td>\n",
        "      <td>                        TOTAL DEBT % COMMON EQUITY</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1663</th>\n",
        "      <td>  8235</td>\n",
        "      <td>             TOTAL DEBT % COMMON EQUITY - 5 YR AVG</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1664</th>\n",
        "      <td>  8236</td>\n",
        "      <td>                         TOTAL DEBT % TOTAL ASSETS</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1665</th>\n",
        "      <td>  8240</td>\n",
        "      <td>              TOTAL DEBT % TOTAL ASSETS - 5 YR AVG</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1666</th>\n",
        "      <td>  8221</td>\n",
        "      <td>      TOTAL DEBT % TOTAL CAPITAL &amp; SHORT TERM DEBT</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1667</th>\n",
        "      <td>  8225</td>\n",
        "      <td>             TOTAL DEBT % TOTAL CAPITAL - 5 YR AVG</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1766</th>\n",
        "      <td> 18231</td>\n",
        "      <td>                             WEIGHTED COST OF DEBT</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 12,
       "text": [
        "      Number                                               Name\n",
        "197    18282                                   CONVERTIBLE DEBT\n",
        "215    18232                  CURRENT PORTION OF LONG TERM DEBT\n",
        "817     1251                           INTEREST EXPENSE ON DEBT\n",
        "929     3251                                     LONG TERM DEBT\n",
        "930     8226                     LONG TERM DEBT % COMMON EQUITY\n",
        "931     8277              LONG TERM DEBT % COMMON EQUITY (GAAP)\n",
        "932     8279  LONG TERM DEBT % COMMON EQUITY (GAAP) - 3 YEAR...\n",
        "933     8281  LONG TERM DEBT % COMMON EQUITY (GAAP) - 5 YEAR...\n",
        "934     8230          LONG TERM DEBT % COMMON EQUITY - 5 YR AVG\n",
        "935     8216                     LONG TERM DEBT % TOTAL CAPITAL\n",
        "936     8220          LONG TERM DEBT % TOTAL CAPITAL - 5 YR AVG\n",
        "937     8217           LONG TERM DEBT % TOTAL CAPITAL - CURRENT\n",
        "938     6769                              LONG TERM DEBT - GAAP\n",
        "939     3245        LONG TERM DEBT EXCLUDING CAPITALIZED LEASES\n",
        "1059   18199                                           NET DEBT\n",
        "1104   18281                               NON-CONVERTIBLE DEBT\n",
        "1440   18298            PROVISION FOR BAD DEBTS (SUPPLEMENTARY)\n",
        "1458    4701                        REDUCTION IN LONG TERM DEBT\n",
        "1560    3051  SHORT TERM DEBT & CURRENT PORTION OF LONG TERM...\n",
        "1661    3255                                         TOTAL DEBT\n",
        "1662    8231                         TOTAL DEBT % COMMON EQUITY\n",
        "1663    8235              TOTAL DEBT % COMMON EQUITY - 5 YR AVG\n",
        "1664    8236                          TOTAL DEBT % TOTAL ASSETS\n",
        "1665    8240               TOTAL DEBT % TOTAL ASSETS - 5 YR AVG\n",
        "1666    8221       TOTAL DEBT % TOTAL CAPITAL & SHORT TERM DEBT\n",
        "1667    8225              TOTAL DEBT % TOTAL CAPITAL - 5 YR AVG\n",
        "1766   18231                              WEIGHTED COST OF DEBT"
       ]
      }
     ],
     "prompt_number": 12
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Functional/Production Style\n",
      "\n",
      "genereate universe from SP500 filter to only include Information GICS"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "gics_df = trmeta.gics\n",
      "gics_df.rename(columns={'SECCODE':'seccode'},inplace=True)\n",
      "gics_df.head()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>ID</th>\n",
        "      <th>CUSIP</th>\n",
        "      <th>NAME</th>\n",
        "      <th>GIC_CODE</th>\n",
        "      <th>SECTOR</th>\n",
        "      <th>GROUP_</th>\n",
        "      <th>INDUSTRY</th>\n",
        "      <th>SUBINDUSTRY</th>\n",
        "      <th>seccode</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>0</th>\n",
        "      <td>      ITP</td>\n",
        "      <td> 46091910</td>\n",
        "      <td> INTERTAPE POLYMER GROUP INC COM</td>\n",
        "      <td> 15103010</td>\n",
        "      <td> Materials</td>\n",
        "      <td> Materials</td>\n",
        "      <td> Containers &amp; Packaging</td>\n",
        "      <td> Metal &amp; Glass Containers</td>\n",
        "      <td> 37177</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1</th>\n",
        "      <td>   GBCO.A</td>\n",
        "      <td> 39762410</td>\n",
        "      <td>                  GREIF INC CL A</td>\n",
        "      <td> 15103010</td>\n",
        "      <td> Materials</td>\n",
        "      <td> Materials</td>\n",
        "      <td> Containers &amp; Packaging</td>\n",
        "      <td> Metal &amp; Glass Containers</td>\n",
        "      <td> 31363</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2</th>\n",
        "      <td>      ATR</td>\n",
        "      <td> 03833610</td>\n",
        "      <td>              APTARGROUP INC COM</td>\n",
        "      <td> 15103010</td>\n",
        "      <td> Materials</td>\n",
        "      <td> Materials</td>\n",
        "      <td> Containers &amp; Packaging</td>\n",
        "      <td> Metal &amp; Glass Containers</td>\n",
        "      <td>  6122</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3</th>\n",
        "      <td> 14606P10</td>\n",
        "      <td> 92511810</td>\n",
        "      <td>               VERSADIAL INC COM</td>\n",
        "      <td> 15103010</td>\n",
        "      <td> Materials</td>\n",
        "      <td> Materials</td>\n",
        "      <td> Containers &amp; Packaging</td>\n",
        "      <td> Metal &amp; Glass Containers</td>\n",
        "      <td> 12589</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4</th>\n",
        "      <td>      PPK</td>\n",
        "      <td> 73191210</td>\n",
        "      <td>      POLYAIR INTER PACK INC COM</td>\n",
        "      <td> 15103010</td>\n",
        "      <td> Materials</td>\n",
        "      <td> Materials</td>\n",
        "      <td> Containers &amp; Packaging</td>\n",
        "      <td> Metal &amp; Glass Containers</td>\n",
        "      <td> 56467</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 13,
       "text": [
        "         ID     CUSIP                             NAME  GIC_CODE     SECTOR  \\\n",
        "0       ITP  46091910  INTERTAPE POLYMER GROUP INC COM  15103010  Materials   \n",
        "1    GBCO.A  39762410                   GREIF INC CL A  15103010  Materials   \n",
        "2       ATR  03833610               APTARGROUP INC COM  15103010  Materials   \n",
        "3  14606P10  92511810                VERSADIAL INC COM  15103010  Materials   \n",
        "4       PPK  73191210       POLYAIR INTER PACK INC COM  15103010  Materials   \n",
        "\n",
        "      GROUP_                INDUSTRY               SUBINDUSTRY  seccode  \n",
        "0  Materials  Containers & Packaging  Metal & Glass Containers    37177  \n",
        "1  Materials  Containers & Packaging  Metal & Glass Containers    31363  \n",
        "2  Materials  Containers & Packaging  Metal & Glass Containers     6122  \n",
        "3  Materials  Containers & Packaging  Metal & Glass Containers    12589  \n",
        "4  Materials  Containers & Packaging  Metal & Glass Containers    56467  "
       ]
      }
     ],
     "prompt_number": 13
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "universe = spx.data\n",
      "universe = universe.merge(gics_df,on=['seccode'])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 14
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "universe[['seccode','name','CUSIP','GIC_CODE','SECTOR','INDUSTRY']].tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>seccode</th>\n",
        "      <th>name</th>\n",
        "      <th>CUSIP</th>\n",
        "      <th>GIC_CODE</th>\n",
        "      <th>SECTOR</th>\n",
        "      <th>INDUSTRY</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>494</th>\n",
        "      <td> 11035271</td>\n",
        "      <td> Kraft Foods Group Inc</td>\n",
        "      <td> 50076Q10</td>\n",
        "      <td> 30202030</td>\n",
        "      <td>       Consumer Staples</td>\n",
        "      <td>     Food Products</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>495</th>\n",
        "      <td> 11039494</td>\n",
        "      <td>            AbbVie Inc</td>\n",
        "      <td> 00287Y10</td>\n",
        "      <td> 35202010</td>\n",
        "      <td>            Health Care</td>\n",
        "      <td>   Pharmaceuticals</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>496</th>\n",
        "      <td> 11063025</td>\n",
        "      <td>            Zoetis Inc</td>\n",
        "      <td> 98978V10</td>\n",
        "      <td> 35202010</td>\n",
        "      <td>            Health Care</td>\n",
        "      <td>   Pharmaceuticals</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>497</th>\n",
        "      <td> 11078343</td>\n",
        "      <td>      News Corporation</td>\n",
        "      <td> 65249B10</td>\n",
        "      <td> 25401040</td>\n",
        "      <td> Consumer Discretionary</td>\n",
        "      <td>             Media</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>498</th>\n",
        "      <td> 11111190</td>\n",
        "      <td>          Allegion plc</td>\n",
        "      <td> G0176J10</td>\n",
        "      <td> 20102010</td>\n",
        "      <td>            Industrials</td>\n",
        "      <td> Building Products</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 15,
       "text": [
        "      seccode                   name     CUSIP  GIC_CODE  \\\n",
        "494  11035271  Kraft Foods Group Inc  50076Q10  30202030   \n",
        "495  11039494             AbbVie Inc  00287Y10  35202010   \n",
        "496  11063025             Zoetis Inc  98978V10  35202010   \n",
        "497  11078343       News Corporation  65249B10  25401040   \n",
        "498  11111190           Allegion plc  G0176J10  20102010   \n",
        "\n",
        "                     SECTOR           INDUSTRY  \n",
        "494        Consumer Staples      Food Products  \n",
        "495             Health Care    Pharmaceuticals  \n",
        "496             Health Care    Pharmaceuticals  \n",
        "497  Consumer Discretionary              Media  \n",
        "498             Industrials  Building Products  "
       ]
      }
     ],
     "prompt_number": 15
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "universe = universe[universe.SECTOR.str.contains('Information')]\n",
      "universe.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>iname</th>\n",
        "      <th>iticker</th>\n",
        "      <th>ticker</th>\n",
        "      <th>cusip</th>\n",
        "      <th>name</th>\n",
        "      <th>date_</th>\n",
        "      <th>close_</th>\n",
        "      <th>shares</th>\n",
        "      <th>seccode</th>\n",
        "      <th>relative_market_cap</th>\n",
        "      <th>ID</th>\n",
        "      <th>CUSIP</th>\n",
        "      <th>NAME</th>\n",
        "      <th>GIC_CODE</th>\n",
        "      <th>SECTOR</th>\n",
        "      <th>GROUP_</th>\n",
        "      <th>INDUSTRY</th>\n",
        "      <th>SUBINDUSTRY</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>465</th>\n",
        "      <td> S&amp;P 500 INDEX</td>\n",
        "      <td> SPX_IDX</td>\n",
        "      <td> FSLR</td>\n",
        "      <td> 33643310</td>\n",
        "      <td>     First Solar Inc</td>\n",
        "      <td>2014-01-30 00:00:00</td>\n",
        "      <td>  51.470001</td>\n",
        "      <td>   70.60169</td>\n",
        "      <td>   198380</td>\n",
        "      <td>   3633.869070</td>\n",
        "      <td> 33643310</td>\n",
        "      <td> 33643310</td>\n",
        "      <td>         FIRST SOLAR INC COM</td>\n",
        "      <td> 45301020</td>\n",
        "      <td> Information Technology</td>\n",
        "      <td> Semiconductors &amp; Semiconductor Equipment</td>\n",
        "      <td>       Semiconductors &amp; Semiconductor Equipment</td>\n",
        "      <td>                        Semiconductors</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>471</th>\n",
        "      <td> S&amp;P 500 INDEX</td>\n",
        "      <td> SPX_IDX</td>\n",
        "      <td>  TEL</td>\n",
        "      <td> H8498910</td>\n",
        "      <td> TE Connectivity Ltd</td>\n",
        "      <td>2014-01-30 00:00:00</td>\n",
        "      <td>  57.730000</td>\n",
        "      <td>  410.37400</td>\n",
        "      <td>   306418</td>\n",
        "      <td>  23690.890832</td>\n",
        "      <td>    TELWI</td>\n",
        "      <td> H8498910</td>\n",
        "      <td> TE CONNECTIVITY LTD REG SHS</td>\n",
        "      <td> 45203020</td>\n",
        "      <td> Information Technology</td>\n",
        "      <td>          Technology Hardware &amp; Equipment</td>\n",
        "      <td> Electronic Equipment, Instruments &amp; Components</td>\n",
        "      <td>     Electronic Manufacturing Services</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>472</th>\n",
        "      <td> S&amp;P 500 INDEX</td>\n",
        "      <td> SPX_IDX</td>\n",
        "      <td>  TDC</td>\n",
        "      <td> 88076W10</td>\n",
        "      <td>       Teradata Corp</td>\n",
        "      <td>2014-01-30 00:00:00</td>\n",
        "      <td>  42.130001</td>\n",
        "      <td>  163.40000</td>\n",
        "      <td>   321417</td>\n",
        "      <td>   6884.042175</td>\n",
        "      <td>    TDCWI</td>\n",
        "      <td> 88076W10</td>\n",
        "      <td>       TERADATA CORP DEL COM</td>\n",
        "      <td> 45102010</td>\n",
        "      <td> Information Technology</td>\n",
        "      <td>                      Software &amp; Services</td>\n",
        "      <td>                                    IT Services</td>\n",
        "      <td>        IT Consulting &amp; Other Services</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>474</th>\n",
        "      <td> S&amp;P 500 INDEX</td>\n",
        "      <td> SPX_IDX</td>\n",
        "      <td>    V</td>\n",
        "      <td> 92826C83</td>\n",
        "      <td>            Visa Inc</td>\n",
        "      <td>2014-01-30 00:00:00</td>\n",
        "      <td> 220.880005</td>\n",
        "      <td>  509.23920</td>\n",
        "      <td>   340028</td>\n",
        "      <td> 112480.756983</td>\n",
        "      <td> 92826C83</td>\n",
        "      <td> 92826C83</td>\n",
        "      <td>           VISA INC COM CL A</td>\n",
        "      <td> 45102020</td>\n",
        "      <td> Information Technology</td>\n",
        "      <td>                      Software &amp; Services</td>\n",
        "      <td>                                    IT Services</td>\n",
        "      <td> Data Processing &amp; Outsourced Services</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>492</th>\n",
        "      <td> S&amp;P 500 INDEX</td>\n",
        "      <td> SPX_IDX</td>\n",
        "      <td>   FB</td>\n",
        "      <td> 30303M10</td>\n",
        "      <td>        Facebook Inc</td>\n",
        "      <td>2014-01-30 00:00:00</td>\n",
        "      <td>  61.080002</td>\n",
        "      <td> 1644.73476</td>\n",
        "      <td> 11027692</td>\n",
        "      <td> 100460.402152</td>\n",
        "      <td> 30303M10</td>\n",
        "      <td> 30303M10</td>\n",
        "      <td>           FACEBOOK INC CL A</td>\n",
        "      <td> 45101010</td>\n",
        "      <td> Information Technology</td>\n",
        "      <td>                      Software &amp; Services</td>\n",
        "      <td>                   Internet Software &amp; Services</td>\n",
        "      <td>          Internet Software &amp; Services</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 16,
       "text": [
        "             iname  iticker ticker     cusip                 name  \\\n",
        "465  S&P 500 INDEX  SPX_IDX   FSLR  33643310      First Solar Inc   \n",
        "471  S&P 500 INDEX  SPX_IDX    TEL  H8498910  TE Connectivity Ltd   \n",
        "472  S&P 500 INDEX  SPX_IDX    TDC  88076W10        Teradata Corp   \n",
        "474  S&P 500 INDEX  SPX_IDX      V  92826C83             Visa Inc   \n",
        "492  S&P 500 INDEX  SPX_IDX     FB  30303M10         Facebook Inc   \n",
        "\n",
        "                  date_      close_      shares   seccode  \\\n",
        "465 2014-01-30 00:00:00   51.470001    70.60169    198380   \n",
        "471 2014-01-30 00:00:00   57.730000   410.37400    306418   \n",
        "472 2014-01-30 00:00:00   42.130001   163.40000    321417   \n",
        "474 2014-01-30 00:00:00  220.880005   509.23920    340028   \n",
        "492 2014-01-30 00:00:00   61.080002  1644.73476  11027692   \n",
        "\n",
        "     relative_market_cap        ID     CUSIP                         NAME  \\\n",
        "465          3633.869070  33643310  33643310          FIRST SOLAR INC COM   \n",
        "471         23690.890832     TELWI  H8498910  TE CONNECTIVITY LTD REG SHS   \n",
        "472          6884.042175     TDCWI  88076W10        TERADATA CORP DEL COM   \n",
        "474        112480.756983  92826C83  92826C83            VISA INC COM CL A   \n",
        "492        100460.402152  30303M10  30303M10            FACEBOOK INC CL A   \n",
        "\n",
        "     GIC_CODE                  SECTOR  \\\n",
        "465  45301020  Information Technology   \n",
        "471  45203020  Information Technology   \n",
        "472  45102010  Information Technology   \n",
        "474  45102020  Information Technology   \n",
        "492  45101010  Information Technology   \n",
        "\n",
        "                                       GROUP_  \\\n",
        "465  Semiconductors & Semiconductor Equipment   \n",
        "471           Technology Hardware & Equipment   \n",
        "472                       Software & Services   \n",
        "474                       Software & Services   \n",
        "492                       Software & Services   \n",
        "\n",
        "                                           INDUSTRY  \\\n",
        "465        Semiconductors & Semiconductor Equipment   \n",
        "471  Electronic Equipment, Instruments & Components   \n",
        "472                                     IT Services   \n",
        "474                                     IT Services   \n",
        "492                    Internet Software & Services   \n",
        "\n",
        "                               SUBINDUSTRY  \n",
        "465                         Semiconductors  \n",
        "471      Electronic Manufacturing Services  \n",
        "472         IT Consulting & Other Services  \n",
        "474  Data Processing & Outsourced Services  \n",
        "492           Internet Software & Services  "
       ]
      }
     ],
     "prompt_number": 16
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "The functional style is designed to injest the simplest list of seccodes:"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "universe = universe.seccode.tolist()\n",
      "universe[:5]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 17,
       "text": [
        "[2099, 5689, 3788, 6088, 14316]"
       ]
      }
     ],
     "prompt_number": 17
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Define some metrics and date ranges"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "NI = 1751\n",
      "CASH = 2001\n",
      "TL = 3351\n",
      "dt_list = (dt.datetime(2013,2,2),dt.datetime(2014,2,13))\n",
      "metrics = [NI,CASH,TL]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 18
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "tr = fd.TRQAD()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 19
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "df = tr.worldscope(universe,metrics,dt_list)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 20
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "df.head()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>item</th>\n",
        "      <th>seccode</th>\n",
        "      <th>year_</th>\n",
        "      <th>seq</th>\n",
        "      <th>value_</th>\n",
        "      <th>date</th>\n",
        "      <th>fdate</th>\n",
        "      <th>freq</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>38 </th>\n",
        "      <td> 2001</td>\n",
        "      <td>  5689</td>\n",
        "      <td> 2013</td>\n",
        "      <td> 1</td>\n",
        "      <td> 3993385000</td>\n",
        "      <td>2013-02-02 00:00:00</td>\n",
        "      <td>2013-11-02 00:00:00</td>\n",
        "      <td> Q</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>43 </th>\n",
        "      <td> 3351</td>\n",
        "      <td>  5689</td>\n",
        "      <td> 2013</td>\n",
        "      <td> 1</td>\n",
        "      <td> 1365455000</td>\n",
        "      <td>2013-02-02 00:00:00</td>\n",
        "      <td>2013-11-02 00:00:00</td>\n",
        "      <td> Q</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>236</th>\n",
        "      <td> 2001</td>\n",
        "      <td> 38007</td>\n",
        "      <td> 2013</td>\n",
        "      <td> 2</td>\n",
        "      <td> 1068988000</td>\n",
        "      <td>2013-02-28 00:00:00</td>\n",
        "      <td>2013-08-31 00:00:00</td>\n",
        "      <td> Q</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>240</th>\n",
        "      <td> 3351</td>\n",
        "      <td> 38007</td>\n",
        "      <td> 2013</td>\n",
        "      <td> 2</td>\n",
        "      <td> 5997030000</td>\n",
        "      <td>2013-02-28 00:00:00</td>\n",
        "      <td>2013-08-31 00:00:00</td>\n",
        "      <td> Q</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>306</th>\n",
        "      <td> 2001</td>\n",
        "      <td> 46760</td>\n",
        "      <td> 2013</td>\n",
        "      <td> 2</td>\n",
        "      <td> 2230000000</td>\n",
        "      <td>2013-02-28 00:00:00</td>\n",
        "      <td>2013-08-29 00:00:00</td>\n",
        "      <td> Q</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 21,
       "text": [
        "     item  seccode  year_  seq      value_                date  \\\n",
        "38   2001     5689   2013    1  3993385000 2013-02-02 00:00:00   \n",
        "43   3351     5689   2013    1  1365455000 2013-02-02 00:00:00   \n",
        "236  2001    38007   2013    2  1068988000 2013-02-28 00:00:00   \n",
        "240  3351    38007   2013    2  5997030000 2013-02-28 00:00:00   \n",
        "306  2001    46760   2013    2  2230000000 2013-02-28 00:00:00   \n",
        "\n",
        "                  fdate freq  \n",
        "38  2013-11-02 00:00:00    Q  \n",
        "43  2013-11-02 00:00:00    Q  \n",
        "236 2013-08-31 00:00:00    Q  \n",
        "240 2013-08-31 00:00:00    Q  \n",
        "306 2013-08-29 00:00:00    Q  "
       ]
      }
     ],
     "prompt_number": 21
    }
   ],
   "metadata": {}
  }
 ]
}